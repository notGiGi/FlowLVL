version: '3.8'

services:
  # Base de datos para almacenar métricas y eventos
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=predictor
      - POSTGRES_PASSWORD=predictor_password
      - POSTGRES_DB=metrics_db
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - predictor_network

  # Kafka para streaming de eventos
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - predictor_network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - predictor_network

  # Prometheus para la recolección de métricas
  prometheus:
    image: prom/prometheus:v2.40.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - predictor_network

  # Grafana para visualización
  grafana:
    image: grafana/grafana:9.2.0
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
      - timescaledb
    networks:
      - predictor_network

  # Recolector de datos
  collector:
    build:
      context: ./collectors
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - prometheus
    volumes:
      - ./collectors/config:/app/config
    env_file:
      - .env
    networks:
      - predictor_network
    restart: unless-stopped

  # Preprocesador de datos
  preprocessor:
    build:
      context: ./preprocessor
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - timescaledb
    env_file:
      - .env
    networks:
      - predictor_network
    restart: unless-stopped

  # Detector de anomalías
  anomaly_detector:
    build:
      context: ./anomaly_detector
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - timescaledb
    env_file:
      - .env
    volumes:
      - ./models:/app/models
    networks:
      - predictor_network
    restart: unless-stopped

  # Motor predictivo
  predictive_engine:
    build:
      context: ./predictive_engine
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - timescaledb
    env_file:
      - .env
    volumes:
      - ./models:/app/models
    networks:
      - predictor_network
    restart: unless-stopped

  # Recomendador de acciones
  action_recommender:
    build:
      context: ./action_recommender
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - predictive_engine
    env_file:
      - .env
    volumes:
      - ./models:/app/models
      - ./action_recommender/policies:/app/policies
    networks:
      - predictor_network
    restart: unless-stopped

  # API REST
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - timescaledb
      - action_recommender
    env_file:
      - .env
    networks:
      - predictor_network
    restart: unless-stopped

  # Dashboard web
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    ports:
      - "3001:80"
    depends_on:
      - api
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
    networks:
      - predictor_network
    restart: unless-stopped

  # Node exporter para métricas de host
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - predictor_network
    restart: unless-stopped

  # Kafka exporter para métricas de Kafka
  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    ports:
      - "9308:9308"
    command:
      - '--kafka.server=kafka:29092'
    depends_on:
      - kafka
    networks:
      - predictor_network
    restart: unless-stopped

  # Postgres exporter para métricas de TimescaleDB
  timescaledb-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://predictor:predictor_password@timescaledb:5432/metrics_db?sslmode=disable
    depends_on:
      - timescaledb
    networks:
      - predictor_network
    restart: unless-stopped

networks:
  predictor_network:
    driver: bridge

volumes:
  timescaledb_data:
  prometheus_data:
  grafana_data: