services:
  # Base de datos para almacenar métricas históricas
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=predictive
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Cache distribuida y comunicación entre servicios
  redis:
    image: redis:7.0-alpine
    command: redis-server --requirepass redis123
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Monitoreo con Prometheus
  prometheus:
    image: prom/prometheus:v2.41.0
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    restart: unless-stopped
    depends_on:
      - pushgateway

  # Gateway para métricas
  pushgateway:
    image: prom/pushgateway:v1.5.1
    ports:
      - "9091:9091"
    restart: unless-stopped

  # Visualización en Grafana
  grafana:
    image: grafana/grafana:9.3.6
    volumes:
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus

  # API principal (se asume que su Dockerfile y demás archivos están en ./api)
  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    volumes:
      - ./config:/app/config
      - ./models:/app/models
      - ./data:/app/data
    environment:
      - API_KEYS=test_key,development_key
      - SECRET_KEY=your_secret_key_here
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - DB_HOST=timescaledb
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=predictive
      - PROMETHEUS_PUSH_GATEWAY=pushgateway:9091
      - METRICS_ENABLED=true
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - timescaledb
      - pushgateway
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: uvicorn api.controller:create_api_app --host 0.0.0.0 --port 8000

  # Detector de anomalías (se asume que su Dockerfile y requirements.txt están en ./anomaly_detector)
  anomaly-detector:
    build:
      context: ./anomaly_detector
      dockerfile: Dockerfile
    volumes:
      - ./config:/app/config
      - ./models:/app/models
      - ./data:/app/data
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - DB_HOST=timescaledb
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=predictive
      - PROMETHEUS_PUSH_GATEWAY=pushgateway:9091
      - METRICS_ENABLED=true
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - timescaledb
      - pushgateway
    restart: unless-stopped

  # Motor predictivo  
  # Se establece el contexto en la raíz para que el Dockerfile pueda copiar archivos desde:
  # - predictive_engine/ (el propio código y requirements)
  # - utils/ (carpeta común al nivel superior)
  predictive-engine:
    build:
      context: .
      dockerfile: predictive_engine/Dockerfile
    volumes:
      - ./config:/app/config
      - ./models:/app/models
      - ./data:/app/data
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - DB_HOST=timescaledb
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=predictive
      - PROMETHEUS_PUSH_GATEWAY=pushgateway:9091
      - METRICS_ENABLED=true
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - timescaledb
      - pushgateway
    restart: unless-stopped

  # Recomendador de acciones (se asume que su Dockerfile y archivos están en ./action_recommender)
  action-recommender:
    build:
      context: ./action_recommender
      dockerfile: Dockerfile
    volumes:
      - ./config:/app/config
      - ./models:/app/models
      - ./data:/app/data
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - DB_HOST=timescaledb
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=predictive
      - PROMETHEUS_PUSH_GATEWAY=pushgateway:9091
      - METRICS_ENABLED=true
      - LOG_LEVEL=INFO
      - ENABLE_K8S_INTEGRATION=${ENABLE_K8S_INTEGRATION:-false}
    depends_on:
      - redis
      - timescaledb
      - pushgateway
    restart: unless-stopped

  # Perfilador de servicios  
  # Se establece el contexto en la raíz para que el Dockerfile pueda copiar:
  # - monitoring/ (el propio código y requirements)
  # - utils/ y config/ (carpetas comunes)
  service-profiler:
    build:
      context: .
      dockerfile: monitoring/Dockerfile
    volumes:
      - ./config:/app/config
      - ./models:/app/models
      - ./data:/app/data
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - DB_HOST=timescaledb
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=predictive
      - PROMETHEUS_PUSH_GATEWAY=pushgateway:9091
      - METRICS_ENABLED=true
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - timescaledb
      - pushgateway
    restart: unless-stopped

  # Dashboard web (se asume que su Dockerfile y archivos están en ./dashboard)
  dashboard:
    build:
      context: .
      dockerfile: dashboard/Dockerfile
    ports:
      - "3001:80"
    environment:
      - API_URL=http://api:8000
      - GRAFANA_URL=http://grafana:3000
    depends_on:
      - api
    restart: unless-stopped

  # Sistema de notificaciones  
  # Se utiliza la raíz como contexto para acceder, entre otros, a la carpeta utils/
  notification-service:
    build:
      context: .
      dockerfile: notification_service/Dockerfile
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST:-smtp.example.com}
      - EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT:-587}
      - EMAIL_USERNAME=${EMAIL_USERNAME:-user}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD:-password}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL:-https://hooks.slack.com/services/xxx}
      - METRICS_ENABLED=true
      - PROMETHEUS_PUSH_GATEWAY=pushgateway:9091
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - pushgateway
    restart: unless-stopped

volumes:
  timescaledb-data:
  redis-data:
  prometheus-data:
  grafana-data:

  # Minimal API for testing
  minimal-api:
    build:
      context: .
      dockerfile: minimal-api/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - LOG_LEVEL=DEBUG
    restart: unless-stopped
